/**
 * Aplicaci√≥n principal Labels Reader
 * Aplicaci√≥n de consulta de precios - Solo b√∫squeda por c√≥digo
 */

class MobileApp {
    constructor() {
        this.isInitialized = false;
        this.isOnline = navigator.onLine;
        this.config = null;
        
        // Estado de la aplicaci√≥n
        this.state = {
            productsLoaded: false,
            lastSync: null,
            totalProducts: 0
        };
    }

    /**
     * Inicializa la aplicaci√≥n
     */
    async initialize() {
        try {
            console.log('üöÄ Iniciando Labels Reader...');
            
            // Mostrar pantalla de carga
            window.ui.showLoading('Iniciando aplicaci√≥n...');
            window.ui.updateSyncStatus('connecting', 'Iniciando...');
            
            // Inicializar m√≥dulos base
            await this.initializeModules();
            
            // Cargar configuraci√≥n
            await this.loadConfiguration();
            
            // Sincronizar datos
            await this.performInitialSync();
            
            // Inicializar UI
            this.initializeUI();
            
            // Configurar eventos de conectividad
            this.setupConnectivityHandlers();
            
            // Marcar como inicializada
            this.isInitialized = true;
            
            // Ocultar pantalla de carga
            window.ui.hideLoading();
            window.ui.updateSyncStatus('connected', 'Listo');
            
            console.log('‚úÖ Labels Reader inicializado correctamente');
            window.ui.showToast('Aplicaci√≥n lista para consultar precios', 'success');

        } catch (error) {
            console.error('‚ùå Error al inicializar aplicaci√≥n:', error);
            this.handleInitializationError(error);
        }
    }

    /**
     * Inicializa los m√≥dulos base
     */
    async initializeModules() {
        window.ui.updateProgress(0.1, 'Inicializando almacenamiento...');
        
        // Inicializar almacenamiento local
        await window.storageManager.initialize();
        
        window.ui.updateProgress(0.2, 'Inicializando interfaz...');
        
        // Inicializar UI
        window.ui.initialize();
        
        console.log('‚úÖ M√≥dulos base inicializados');
    }

    /**
     * Carga la configuraci√≥n de la aplicaci√≥n
     */
    async loadConfiguration() {
        window.ui.updateProgress(0.3, 'Cargando configuraci√≥n...');
        
        try {
            // Cargar configuraci√≥n de Supabase desde el servidor
            const configLoaded = await window.CONFIG.loadSupabaseConfig();
            
            if (!configLoaded) {
                throw new Error('No se pudo cargar la configuraci√≥n de Supabase desde el servidor');
            }
            
            // Cargar configuraci√≥n local guardada
            const localConfig = await window.storageManager.getAllConfig();
            
            // Combinar configuraciones
            this.config = {
                ...localConfig,
                supabase: window.CONFIG.supabase
            };
            
            console.log('‚úÖ Configuraci√≥n cargada');
            
        } catch (error) {
            console.error('‚ùå Error al cargar configuraci√≥n:', error);
            throw error;
        }
    }

    /**
     * Realiza la sincronizaci√≥n inicial
     */
    async performInitialSync() {
        window.ui.updateProgress(0.4, 'Sincronizando productos...');
        
        try {
            // Verificar si hay datos locales
            const stats = window.storageManager.getStats();
            
            if (stats.totalProducts === 0) {
                // No hay datos locales, sincronizar desde Supabase
                await this.syncProductsFromSupabase();
            } else {
                // Hay datos locales, verificar si necesitan actualizaci√≥n
                const needsUpdate = await this.checkIfUpdateNeeded();
                if (needsUpdate) {
                    await this.syncProductsFromSupabase();
                } else {
                    console.log('‚úÖ Datos locales actualizados');
                }
            }
            
            // Actualizar estado
            this.state.productsLoaded = true;
            this.state.lastSync = new Date().toISOString();
            
            // Actualizar estad√≠sticas
            const finalStats = window.storageManager.getStats();
            this.state.totalProducts = finalStats.totalProducts;
            
            window.ui.updateProgress(1.0, 'Sincronizaci√≥n completada');
            
            console.log(`‚úÖ Sincronizaci√≥n completada: ${finalStats.totalProducts} productos`);
            
        } catch (error) {
            console.error('‚ùå Error en sincronizaci√≥n:', error);
            
            // Intentar usar datos locales si est√°n disponibles
            const stats = window.storageManager.getStats();
            if (stats.totalProducts > 0) {
                console.log('‚ö†Ô∏è Usando datos locales debido a error de sincronizaci√≥n');
                this.state.productsLoaded = true;
                this.state.totalProducts = stats.totalProducts;
            } else {
                throw error;
            }
        }
    }

    /**
     * Sincroniza productos desde Supabase
     */
    async syncProductsFromSupabase() {
        window.ui.updateProgress(0.5, 'Descargando productos...');
        
        try {
            // Obtener productos desde Supabase
            const products = await window.supabaseClient.getAllProducts();
            
            if (!products || products.length === 0) {
                throw new Error('No se encontraron productos en la base de datos');
            }
            
            window.ui.updateProgress(0.7, 'Guardando productos...');
            
            // Guardar productos en almacenamiento local
            await window.storageManager.saveProducts(products);
            
            window.ui.updateProgress(0.9, 'Finalizando...');
            
            console.log(`‚úÖ ${products.length} productos sincronizados`);
            
        } catch (error) {
            console.error('‚ùå Error al sincronizar productos:', error);
            throw error;
        }
    }

    /**
     * Verifica si necesita actualizaci√≥n
     */
    async checkIfUpdateNeeded() {
        try {
            // Verificar √∫ltima actualizaci√≥n en Supabase
            const lastUpdate = await window.supabaseClient.getLastUpdateTime();
            const localLastSync = await window.storageManager.getLastSyncTime();
            
            if (!localLastSync || new Date(lastUpdate) > new Date(localLastSync)) {
                return true;
            }
            
            return false;
            
        } catch (error) {
            console.warn('‚ö†Ô∏è No se pudo verificar actualizaciones:', error);
            return false; // En caso de error, no forzar actualizaci√≥n
        }
    }

    /**
     * Inicializa la interfaz de usuario
     */
    initializeUI() {
        window.ui.updateProgress(0.8, 'Configurando interfaz...');
        
        // La UI ya fue inicializada en initializeModules
        // Aqu√≠ se pueden hacer configuraciones adicionales
        
        console.log('‚úÖ Interfaz inicializada');
    }

    /**
     * Configura los manejadores de conectividad
     */
    setupConnectivityHandlers() {
        // Manejador de cambio de conectividad
        window.addEventListener('online', () => {
            this.isOnline = true;
            window.ui.updateSyncStatus('connected', 'Conectado');
            console.log('üåê Conexi√≥n restaurada');
        });
        
        window.addEventListener('offline', () => {
            this.isOnline = false;
            window.ui.updateSyncStatus('error', 'Sin conexi√≥n');
            console.log('üåê Conexi√≥n perdida');
        });
        
        console.log('‚úÖ Manejadores de conectividad configurados');
    }

    /**
     * Maneja errores de inicializaci√≥n
     */
    handleInitializationError(error) {
        window.ui.hideLoading();
        window.ui.updateSyncStatus('error', 'Error de inicializaci√≥n');
        
        let errorMessage = 'Error al inicializar la aplicaci√≥n';
        
        if (error.message.includes('configuraci√≥n')) {
            errorMessage = 'Error de configuraci√≥n. Verifica la conexi√≥n.';
        } else if (error.message.includes('sincronizaci√≥n')) {
            errorMessage = 'Error de sincronizaci√≥n. Verifica la conexi√≥n.';
        }
        
        window.ui.showToast(errorMessage, 'error', 5000);
        
        console.error('‚ùå Error de inicializaci√≥n:', error);
    }

    /**
     * Obtiene estad√≠sticas de la aplicaci√≥n
     */
    getAppStats() {
        return {
            isInitialized: this.isInitialized,
            isOnline: this.isOnline,
            state: this.state,
            config: this.config ? 'Cargada' : 'No cargada'
        };
    }

    /**
     * Fuerza una nueva sincronizaci√≥n
     */
    async forceSync() {
        if (!this.isOnline) {
            window.ui.showToast('Sin conexi√≥n a internet', 'error');
            return false;
        }
        
        try {
            window.ui.showToast('Sincronizando...', 'info');
            await this.syncProductsFromSupabase();
            
            // Actualizar estado
            this.state.lastSync = new Date().toISOString();
            const stats = window.storageManager.getStats();
            this.state.totalProducts = stats.totalProducts;
            
            window.ui.updateSearchStats();
            window.ui.showToast('Sincronizaci√≥n completada', 'success');
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Error en sincronizaci√≥n forzada:', error);
            window.ui.showToast('Error en sincronizaci√≥n', 'error');
            return false;
        }
    }
}

// Inicializar aplicaci√≥n cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', async () => {
    try {
        window.mobileApp = new MobileApp();
        await window.mobileApp.initialize();
        console.log('üéØ Labels Reader iniciado correctamente');
    } catch (error) {
        console.error('‚ùå Error cr√≠tico al iniciar Labels Reader:', error);
    }
});